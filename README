What I Did:

  This project was to help my uncle label images of carpet swatches by what color they were
    and create a .csv file for him to incorporate into his database.


How I Did It:

Using Python 2.7

The appropriate environment can be installed w/ conda using
  conda env create -f environment.yml
  source activate CarpetColorProject

The code can then be run with 
  python avg_color.py path_to_picture_directory csv_name


First, I had to get a single representative RGB tuple for each picture of carpet to use for naming.
I originally was going to use a simply arithmetic average in each RGB channel, but after reading 
  http://stackoverflow.com/questions/43111029/how-to-find-the-average-colour-of-an-image-in-python-with-opencv
  and modifying the code from that to fit our needs,
  it made more sense to use k-means to find the dominant color (which color was present the most)
  versus a simple arithmetic average of each picture of carpet.
  In code that meant choosing the cluster with the largest number of pixels within that cluster.
The average color of a picture would often lead to a grey-ish color on many pictures that were not grey,
  so dominant color would be the plan going forward.

Once a representative RGB tuple was created, the picture's color name was determined by
  which color within the colors for CSS3 the representative RGB value was closest to in RGB Euclidean space.
If there was a different naming scheme I could simply provide a different mapping of RGB values to color names.
One idea I had but did not implement would be to have multiple RGB values map to the same color name in
  the hopes of covering a wider volume of RGB space with a single color...although I could see some
  pitfalls from uneven distribution of these points...might have to mathematically determine a sphere
  of points from a 'center' RGB value.

On the first attempt I naively copy-pasted the k-means code from the StackOverflow post without
  considering the parameters I was giving to the algorithm.  
This led to poor performance: tn_ST138_Beale_Street_13_Evening_Sun had a dominant color of 
  (0,0,0) and was thus assigned the color 'Black' when clearly the swatch of carpet was a light tan color.
The issue was that I was not giving enough thought into the 'k' parameter of k-means.  
The code on the StackOverflow post had it's k parameter set to 5 because in the image the author
  was working with there were clearly 5 different colors (macro picture of 5 lego pieces of 
  different sizes).
However, you can see by looking at the images of carpet that I was trying to classify that
  there are only 2 or 3 major colors present in the majority of the pictures, so when 
  k=5 before the algorithm was trying to find 5 clusters (5 colors) out of an image that actually
  only had 2 or 3 colors...this led to 
Yes, some of the swatches of carpet had very elaborate designs with multiple colors 
  of similar frequency, but to best classify the majority of the carpet swatches
  setting k to 2 or 3 should have performed better than k=5.
The change worked well.  The Beale_Street picture was given a dominant color of (207, 189, 155) -> tan
  at k=2 and other mislabeled images at k=5 that my uncle discovered were given more
  accurate color names when running at k=2.


I submitted the resulting .csv files (Containing RGB values of both the average and dominant color)
  from running at k=2,3 and 5 to my uncle where he did
  further analysis and judgement, mostly reducing the number of color names to 9 by
  find/replacing CSS3 names with whatever names he ended up using (I don't know those).



What I Learned Along The Way:
  Don't just copy paste StackOverflow algorithmic code without understanding parameters
  A deeper understanding of k-means and ML algorithms in general
  Having a 'golden standard' dataset would make evaluation much easier
  OpenCV opens images in BGR mode instead of RGB mode
  csv Python module
  







